<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tife Bites - Admin Dashboard</title>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary: #e63946;
            --secondary: #f8f9fa;
            --dark: #1d3557;
            --light: #ffffff;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: #333;
        }

        /* Admin Login */
        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, var(--primary) 0%, var(--dark) 100%);
        }

        .login-card {
            background: var(--light);
            padding: 2rem;
            border-radius: 10px;
            box-shadow: var(--shadow);
            width: 100%;
            max-width: 400px;
            text-align: center;
        }

        .login-card h2 {
            color: var(--dark);
            margin-bottom: 1.5rem;
        }

        .login-card input {
            width: 100%;
            padding: 12px;
            margin-bottom: 1rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }

        .login-btn {
            width: 100%;
            padding: 12px;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        .login-btn:hover {
            background-color: var(--dark);
        }

        /* Admin Dashboard */
        .admin-dashboard {
            display: none;
        }

        .sidebar {
            width: 250px;
            background: var(--dark);
            color: white;
            height: 100vh;
            position: fixed;
            padding: 1rem;
            transition: var(--transition);
        }

        .sidebar-header {
            padding: 1rem 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 1rem;
        }

        .sidebar-header h3 {
            color: var(--light);
        }

        .sidebar-nav {
            list-style: none;
        }

        .sidebar-nav li {
            margin-bottom: 0.5rem;
        }

        .sidebar-nav a {
            display: flex;
            align-items: center;
            padding: 0.75rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            border-radius: 5px;
            transition: var(--transition);
        }

        .sidebar-nav a:hover, .sidebar-nav a.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .sidebar-nav i {
            margin-right: 0.75rem;
            width: 20px;
            text-align: center;
        }

        .main-content {
            margin-left: 250px;
            padding: 1.5rem;
            transition: var(--transition);
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .header h2 {
            color: var(--dark);
        }

        .logout-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            transition: var(--transition);
        }

        .logout-btn:hover {
            background: #c1121f;
        }

        .card {
            background: var(--light);
            border-radius: 10px;
            box-shadow: var(--shadow);
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid #eee;
        }

        .card-header h3 {
            color: var(--dark);
        }

        .add-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            cursor: pointer;
            transition: var(--transition);
        }

        .add-btn:hover {
            background: var(--dark);
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .status {
            padding: 0.25rem 0.5rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .status-pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-completed {
            background: #d4edda;
            color: #155724;
        }

        .action-btn {
            padding: 0.25rem 0.5rem;
            border-radius: 5px;
            border: none;
            cursor: pointer;
            transition: var(--transition);
        }

        .edit-btn {
            background: #ffc107;
            color: #856404;
            margin-right: 0.5rem;
        }

        .delete-btn {
            background: #dc3545;
            color: white;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
        }

        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 1rem;
        }

        .form-group textarea {
            min-height: 100px;
            resize: vertical;
        }

        .submit-btn {
            background: var(--primary);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 5px;
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
        }

        .submit-btn:hover {
            background: var(--dark);
        }

        /* Responsive Design */
        @media (max-width: 992px) {
            .sidebar {
                width: 70px;
                overflow: hidden;
            }
            .sidebar-header h3, .sidebar-nav span {
                display: none;
            }
            .sidebar-nav i {
                margin-right: 0;
                font-size: 1.25rem;
            }
            .sidebar-nav a {
                justify-content: center;
                padding: 1rem 0;
            }
            .main-content {
                margin-left: 70px;
            }
        }

        @media (max-width: 768px) {
            table {
                display: block;
                overflow-x: auto;
            }
        }

        @media (max-width: 576px) {
            .sidebar {
                width: 100%;
                height: auto;
                position: relative;
            }
            .sidebar-nav {
                display: flex;
                overflow-x: auto;
            }
            .sidebar-nav li {
                margin-bottom: 0;
                margin-right: 0.5rem;
            }
            .main-content {
                margin-left: 0;
            }
        }
    </style>
</head>
<body>
    <!-- Admin Login -->
    <div class="login-container" id="login-section">
        <div class="login-card">
            <h2>Tife Bites Admin</h2>
            <input type="email" id="adminEmail" placeholder="Admin Email">
            <input type="password" id="adminPassword" placeholder="Password">
            <button class="login-btn" id="adminLoginBtn">Login</button>
        </div>
    </div>

    <!-- Admin Dashboard -->
    <div class="admin-dashboard" id="admin-dashboard">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h3>Tife Bites</h3>
            </div>
            <ul class="sidebar-nav">
                <li>
                    <a href="#" class="active" data-section="dashboard">
                        <i class="fas fa-tachometer-alt"></i>
                        <span>Dashboard</span>
                    </a>
                </li>
                <li>
                    <a href="#" data-section="cakes">
                        <i class="fas fa-birthday-cake"></i>
                        <span>Cake Management</span>
                    </a>
                </li>
                <li>
                    <a href="#" data-section="orders">
                        <i class="fas fa-shopping-cart"></i>
                        <span>Orders</span>
                    </a>
                </li>
                <li>
                    <a href="#" data-section="complaints">
                        <i class="fas fa-comments"></i>
                        <span>Customer Complaints</span>
                    </a>
                </li>
                <li>
                    <a href="#" data-section="analytics">
                        <i class="fas fa-chart-line"></i>
                        <span>Analytics</span>
                    </a>
                </li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="header">
                <h2 id="page-title">Dashboard</h2>
                <button class="logout-btn" id="logoutBtn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>

            <!-- Dashboard Overview -->
            <div class="card" id="dashboard-section">
                <div class="card-header">
                    <h3>Overview</h3>
                </div>
                <div class="stats-grid">
                    <div class="stat-card">
                        <h4>Total Orders</h4>
                        <p id="total-orders">0</p>
                    </div>
                    <div class="stat-card">
                        <h4>Pending Orders</h4>
                        <p id="pending-orders">0</p>
                    </div>
                    <div class="stat-card">
                        <h4>Completed Orders</h4>
                        <p id="completed-orders">0</p>
                    </div>
                    <div class="stat-card">
                        <h4>Active Complaints</h4>
                        <p id="active-complaints">0</p>
                    </div>
                </div>
            </div>

            <!-- Cake Management -->
            <div class="card" id="cakes-section" style="display: none;">
                <div class="card-header">
                    <h3>Cake Management</h3>
                    <button class="add-btn" id="addCakeBtn">
                        <i class="fas fa-plus"></i> Add Cake
                    </button>
                </div>
                <div id="cakes-table">
                    <table>
                        <thead>
                            <tr>
                                <th>Image</th>
                                <th>Name</th>
                                <th>Price</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="cakes-list"></tbody>
                    </table>
                </div>
                <div id="add-cake-form" style="display: none;">
                    <form id="cakeForm">
                        <div class="form-group">
                            <label for="cakeName">Cake Name</label>
                            <input type="text" id="cakeName" required>
                        </div>
                        <div class="form-group">
                            <label for="cakePrice">Price (₦)</label>
                            <input type="number" id="cakePrice" required>
                        </div>
                        <div class="form-group">
                            <label for="cakeDescription">Description</label>
                            <textarea id="cakeDescription"></textarea>
                        </div>
                        <div class="form-group">
                            <label for="cakeImage">Cake Image</label>
                            <input type="file" id="cakeImage" accept="image/*" required>
                        </div>
                        <button type="submit" class="submit-btn">Save Cake</button>
                        <button type="button" class="submit-btn" id="cancelCakeBtn" style="background: #6c757d; margin-left: 10px;">Cancel</button>
                    </form>
                </div>
            </div>

            <!-- Order Management -->
            <div class="card" id="orders-section" style="display: none;">
                <div class="card-header">
                    <h3>Recent Orders</h3>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Order ID</th>
                            <th>Customer</th>
                            <th>Cake</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="orders-list"></tbody>
                </table>
            </div>

            <!-- Complaint Management -->
            <div class="card" id="complaints-section" style="display: none;">
                <div class="card-header">
                    <h3>Customer Complaints</h3>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Customer</th>
                            <th>Message</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="complaints-list"></tbody>
                </table>
            </div>

            <!-- Analytics -->
            <div class="card" id="analytics-section" style="display: none;">
                <div class="card-header">
                    <h3>Analytics</h3>
                </div>
                <div id="analytics-content">
                    <p>Analytics data will be displayed here.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-auth-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-database-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.0/firebase-storage-compat.js"></script>

    <script>
        // Firebase Configuration
        const firebaseConfig = {
            apiKey: "AIzaSyDBUIWCcCm9fSLWzkaqMvPZHjquPP49yps",
            authDomain: "tife-bites.firebaseapp.com",
            databaseURL: "https://tife-bites-default-rtdb.firebaseio.com",
            projectId: "tife-bites",
            storageBucket: "tife-bites.firebasestorage.app",
            messagingSenderId: "20364945554",
            appId: "1:20364945554:web:6b8c02ccdb7b818ca59e4b",
            measurementId: "G-EJECP0R1KL"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const database = firebase.database();
        const storage = firebase.storage();

        // DOM Elements
        const loginSection = document.getElementById('login-section');
        const adminDashboard = document.getElementById('admin-dashboard');
        const adminEmail = document.getElementById('adminEmail');
        const adminPassword = document.getElementById('adminPassword');
        const adminLoginBtn = document.getElementById('adminLoginBtn');
        const logoutBtn = document.getElementById('logoutBtn');
        const pageTitle = document.getElementById('page-title');
        const navLinks = document.querySelectorAll('.sidebar-nav a');
        const sections = document.querySelectorAll('.card[id$="-section"]');
        const addCakeBtn = document.getElementById('addCakeBtn');
        const cakesTable = document.getElementById('cakes-table');
        const addCakeForm = document.getElementById('add-cake-form');
        const cakeForm = document.getElementById('cakeForm');
        const cancelCakeBtn = document.getElementById('cancelCakeBtn');
        const cakesList = document.getElementById('cakes-list');
        const ordersList = document.getElementById('orders-list');
        const complaintsList = document.getElementById('complaints-list');
        const totalOrdersEl = document.getElementById('total-orders');
        const pendingOrdersEl = document.getElementById('pending-orders');
        const completedOrdersEl = document.getElementById('completed-orders');
        const activeComplaintsEl = document.getElementById('active-complaints');

        // Admin Login
        adminLoginBtn.addEventListener('click', () => {
            const email = adminEmail.value;
            const password = adminPassword.value;

            auth.signInWithEmailAndPassword(email, password)
                .then((userCredential) => {
                    return userCredential.user.getIdTokenResult();
                })
                .then((idTokenResult) => {
                    if (idTokenResult.claims.admin) {
                        loginSection.style.display = 'none';
                        adminDashboard.style.display = 'block';
                        loadDashboard();
                    } else {
                        alert("You don't have admin privileges!");
                        auth.signOut();
                    }
                })
                .catch((error) => {
                    alert("Login failed: " + error.message);
                });
        });

        // Logout
        logoutBtn.addEventListener('click', () => {
            auth.signOut().then(() => {
                adminDashboard.style.display = 'none';
                loginSection.style.display = 'flex';
                adminEmail.value = '';
                adminPassword.value = '';
            });
        });

        // Navigation
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = link.getAttribute('data-section');

                // Update active nav link
                navLinks.forEach(navLink => navLink.classList.remove('active'));
                link.classList.add('active');

                // Update page title
                pageTitle.textContent = link.querySelector('span').textContent;

                // Show selected section
                sections.forEach(sec => sec.style.display = 'none');
                document.getElementById(`${section}-section`).style.display = 'block';

                // Load data for section
                switch(section) {
                    case 'cakes':
                        loadCakes();
                        break;
                    case 'orders':
                        loadOrders();
                        break;
                    case 'complaints':
                        loadComplaints();
                        break;
                    case 'analytics':
                        loadAnalytics();
                        break;
                }
            });
        });

        // Toggle cake form
        addCakeBtn.addEventListener('click', () => {
            cakesTable.style.display = 'none';
            addCakeForm.style.display = 'block';
        });

        cancelCakeBtn.addEventListener('click', () => {
            cakesTable.style.display = 'block';
            addCakeForm.style.display = 'none';
            cakeForm.reset();
        });

        // Add new cake
        cakeForm.addEventListener('submit', (e) => {
            e.preventDefault();

            const name = document.getElementById('cakeName').value;
            const price = parseFloat(document.getElementById('cakePrice').value);
            const description = document.getElementById('cakeDescription').value;
            const imageFile = document.getElementById('cakeImage').files[0];

            if (!imageFile) {
                alert("Please select an image");
                return;
            }

            // Upload image to Firebase Storage
            const storageRef = storage.ref('cakes/' + imageFile.name);
            const uploadTask = storageRef.put(imageFile);

            uploadTask.on('state_changed',
                (snapshot) => {
                    // Progress tracking (optional)
                    const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
                    console.log('Upload is ' + progress + '% done');
                },
                (error) => {
                    alert("Upload failed: " + error.message);
                },
                () => {
                    // Get download URL
                    uploadTask.snapshot.ref.getDownloadURL().then((downloadURL) => {
                        // Save cake data to database
                        database.ref('cakes').push({
                            name: name,
                            price: price,
                            description: description,
                            image: downloadURL,
                            createdAt: firebase.database.ServerValue.TIMESTAMP
                        }).then(() => {
                            alert("Cake added successfully!");
                            cakeForm.reset();
                            cakesTable.style.display = 'block';
                            addCakeForm.style.display = 'none';
                            loadCakes();
                        });
                    });
                }
            );
        });

        // Load dashboard stats
        function loadDashboard() {
            // Total orders
            database.ref('orders').once('value').then(snapshot => {
                totalOrdersEl.textContent = snapshot.numChildren();
            });

            // Pending orders
            database.ref('orders').orderByChild('status').equalTo('pending').once('value').then(snapshot => {
                pendingOrdersEl.textContent = snapshot.numChildren();
            });

            // Completed orders
            database.ref('orders').orderByChild('status').equalTo('completed').once('value').then(snapshot => {
                completedOrdersEl.textContent = snapshot.numChildren();
            });

            // Active complaints
            database.ref('complaints').orderByChild('resolved').equalTo(false).once('value').then(snapshot => {
                activeComplaintsEl.textContent = snapshot.numChildren();
            });
        }

        // Load cakes
        function loadCakes() {
            cakesList.innerHTML = '';
            database.ref('cakes').on('value', (snapshot) => {
                const cakes = snapshot.val();
                if (!cakes) {
                    cakesList.innerHTML = '<tr><td colspan="4">No cakes found</td></tr>';
                    return;
                }

                Object.keys(cakes).forEach(key => {
                    const cake = cakes[key];
                    const row = `
                        <tr>
                            <td><img src="${cake.image}" alt="${cake.name}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 5px;"></td>
                            <td>${cake.name}</td>
                            <td>₦${cake.price.toLocaleString()}</td>
                            <td>
                                <button class="action-btn edit-btn" data-id="${key}">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="action-btn delete-btn" data-id="${key}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                    cakesList.innerHTML += row;
                });
            });
        }

        // Load orders
        function loadOrders() {
            ordersList.innerHTML = '';
            database.ref('orders').on('value', (snapshot) => {
                const orders = snapshot.val();
                if (!orders) {
                    ordersList.innerHTML = '<tr><td colspan="6">No orders found</td></tr>';
                    return;
                }

                Object.keys(orders).forEach(key => {
                    const order = orders[key];
                    const row = `
                        <tr>
                            <td>${key.substring(0, 8)}</td>
                            <td>${order.name}</td>
                            <td>${order.cake}</td>
                            <td>${new Date(order.timestamp).toLocaleDateString()}</td>
                            <td>
                                <span class="status status-${order.status}">${order.status}</span>
                            </td>
                            <td>
                                <select onchange="updateOrderStatus('${key}', this.value)" style="padding: 5px; border-radius: 5px; border: 1px solid #ddd;">
                                    <option value="pending" ${order.status === 'pending' ? 'selected' : ''}>Pending</option>
                                    <option value="completed" ${order.status === 'completed' ? 'selected' : ''}>Completed</option>
                                </select>
                            </td>
                        </tr>
                    `;
                    ordersList.innerHTML += row;
                });
            });
        }

        // Load complaints
        function loadComplaints() {
            complaintsList.innerHTML = '';
            database.ref('complaints').on('value', (snapshot) => {
                const complaints = snapshot.val();
                if (!complaints) {
                    complaintsList.innerHTML = '<tr><td colspan="5">No complaints found</td></tr>';
                    return;
                }

                Object.keys(complaints).forEach(key => {
                    const complaint = complaints[key];
                    const row = `
                        <tr>
                            <td>${new Date(complaint.timestamp).toLocaleDateString()}</td>
                            <td>${complaint.name}</td>
                            <td>${complaint.message}</td>
                            <td>
                                <span class="status ${complaint.resolved ? 'status-completed' : 'status-pending'}">
                                    ${complaint.resolved ? 'Resolved' : 'Pending'}
                                </span>
                            </td>
                            <td>
                                <button class="action-btn ${complaint.resolved ? 'edit-btn' : 'delete-btn'}" onclick="toggleComplaintStatus('${key}', ${!complaint.resolved})">
                                    ${complaint.resolved ? 'Reopen' : 'Resolve'}
                                </button>
                            </td>
                        </tr>
                    `;
                    complaintsList.innerHTML += row;
                });
            });
        }

        // Load analytics
        function loadAnalytics() {
            // Placeholder for analytics data
            document.getElementById('analytics-content').innerHTML = `
                <div style="text-align: center; padding: 2rem;">
                    <h4>Coming Soon</h4>
                    <p>Advanced analytics will be available in the next update.</p>
                </div>
            `;
        }

        // Global functions
        window.updateOrderStatus = (orderId, status) => {
            database.ref('orders/' + orderId).update({ status: status });
        };

        window.toggleComplaintStatus = (complaintId, resolved) => {
            database.ref('complaints/' + complaintId).update({ resolved: resolved });
        };

        // Check auth state on load
        auth.onAuthStateChanged((user) => {
            if (user) {
                user.getIdTokenResult().then((idTokenResult) => {
                    if (idTokenResult.claims.admin) {
                        loginSection.style.display = 'none';
                        adminDashboard.style.display = 'block';
                        loadDashboard();
                    } else {
                        auth.signOut();
                    }
                });
            }
        });
    </script>
</body>
</html>